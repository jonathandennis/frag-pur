{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem';\nimport Stone from '../Stone/Stone'; //import checkboxesColor from './checkboxesColor'\n\nimport './StoneFilter.css';\n\nconst StoneFilter = ({\n  stones\n}) => {\n  _s();\n\n  //console.log('stones in StoneFilter: ', stones)\n  const [filtersType, setFiltersType] = useState([]);\n  const [filtersColor, setFiltersColor] = useState([]); ////////// Filter Type logic //////////\n\n  useEffect(() => {\n    const filterValues = [...new Set(['all', ...stones.map(stone => stone.type)])];\n    setFiltersType(filterValues.map((stone, i) => ({\n      active: true,\n      value: stone,\n      id: i + 1\n    })));\n  }, [stones]);\n\n  const onFilterTypeChange = ({\n    target: {\n      checked: active,\n      dataset: {\n        value\n      }\n    }\n  }) => {\n    const newFilters = filtersType.map(stone => [stone.value, 'all'].includes(value) ? { ...stone,\n      active\n    } : stone),\n          isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active);\n    newFilters.find(stone => stone.value === 'all').active = isAll;\n    setFiltersType(newFilters);\n  }; ////////// END Filter Type logic //////////\n  ////////// Filter Color logic //////////\n\n\n  useEffect(() => {\n    const filterValues = [...new Set(['all', ...stones.map(stone => stone.color)])];\n    setFiltersColor(filterValues.map((stone, i) => ({\n      active: false,\n      value: stone,\n      id: i + 1\n    })));\n  }, [stones]);\n\n  const onFilterColorChange = ({\n    target: {\n      checked: active,\n      dataset: {\n        value\n      }\n    }\n  }) => {\n    const newFilters = filtersColor.map(stone => [stone.value, 'all'].includes(value) ? { ...stone,\n      active\n    } : stone),\n          isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active);\n    newFilters.find(stone => stone.value === 'all').active = isAll;\n    setFiltersColor(newFilters);\n  }; ////////// END Filter Color logic //////////\n\n\n  const filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n        filteredColors = filtersColor.filter(stone => stone.active).map(stone => stone.value),\n        filteredStones = stones.match(stone => filteredTypes.includes(stone.type) || filteredColors.includes(stone.color));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stone\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stone__nav-head\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stone__nav-list\",\n        children: [filtersType.map(stone => /*#__PURE__*/_jsxDEV(StoneFilterListItem, { ...stone,\n          onChange: onFilterTypeChange\n        }, stone.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stone__nav-head\",\n        children: \"Couleur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stone__nav-list\",\n        children: [filtersColor.map(stone => /*#__PURE__*/_jsxDEV(StoneFilterListItem, { ...stone,\n          onChange: onFilterColorChange\n        }, stone.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__carousel\",\n      children: filteredStones.map(stone => /*#__PURE__*/_jsxDEV(Stone, {\n        stone: stone,\n        ...stone\n      }, stone.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(StoneFilter, \"gGyUmBLcjzizQhAeucpWLANgth4=\");\n\n_c = StoneFilter;\nexport default StoneFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoneFilter\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js"],"names":["React","useEffect","useState","StoneFilterListItem","Stone","StoneFilter","stones","filtersType","setFiltersType","filtersColor","setFiltersColor","filterValues","Set","map","stone","type","i","active","value","id","onFilterTypeChange","target","checked","dataset","newFilters","includes","isAll","filter","every","find","color","onFilterColorChange","filteredTypes","filteredColors","filteredStones","match"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem'\nimport Stone from '../Stone/Stone'\n//import checkboxesColor from './checkboxesColor'\n\nimport './StoneFilter.css'\n\nconst StoneFilter = ({ stones }) => {\n  //console.log('stones in StoneFilter: ', stones)\n  const [ filtersType, setFiltersType ] = useState([])\n  const [ filtersColor, setFiltersColor ] = useState([])\n\n  ////////// Filter Type logic //////////\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.type) ])]\n    setFiltersType(filterValues.map((stone, i) => ({ active: true, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterTypeChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersType.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersType(newFilters)\n  }\n  ////////// END Filter Type logic //////////\n  ////////// Filter Color logic //////////\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.color) ])]\n    setFiltersColor(filterValues.map((stone, i) => ({ active: false, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterColorChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersColor.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersColor(newFilters)\n  } \n  ////////// END Filter Color logic //////////\n\n  const\n  filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n  filteredColors = filtersColor.filter(stone => stone.active).map(stone => stone.value),\n  filteredStones = stones.match(stone => filteredTypes.includes(stone.type) || filteredColors.includes(stone.color))\n\n    return (\n      <section className=\"stone\">\n        <div className=\"stone__nav\">\n            <h2 className=\"stone__nav-head\">Type</h2>\n            <div className=\"stone__nav-list\">\n              {filtersType.map(stone =>\n              <StoneFilterListItem\n                key={stone.id}\n                {...stone}\n                onChange={onFilterTypeChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n            </div>\n            <h2 className=\"stone__nav-head\">Couleur</h2>\n            <div className=\"stone__nav-list\">\n              {filtersColor.map(stone =>\n              <StoneFilterListItem\n                key={stone.id}\n                {...stone}\n                onChange={onFilterColorChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n            </div>\n        </div>\n            <div className=\"stone__carousel\">\n              {filteredStones.map(stone => \n              <Stone\n                stone={stone}\n                key={stone.id}\n                {...stone}\n              />)}\n            </div>\n      </section>       \n    )\n}\n\nexport default StoneFilter"]},"metadata":{},"sourceType":"module"}