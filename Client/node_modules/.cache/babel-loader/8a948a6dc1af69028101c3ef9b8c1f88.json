{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/StoneDisplay/StoneDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, {\n/* useEffect, */\nuseState } from 'react';\nimport StoneFilter from '../StoneFilter/StoneFilter';\nimport Stone from '../Stone/Stone';\nimport './StoneDisplay.css';\n\nconst StoneDisplay = ({\n  stones\n}) => {\n  _s();\n\n  const [checkedType, setCheckedType] = useState({});\n  const [checkedColor, setCheckedColor] = useState({}); //const [stonesToShow, setStonesToShow] = useState(stones)\n\n  console.log('stones in StoneDisplay: ', stones); //console.log('stonesToShow in Display: ', stonesToShow)\n\n  console.log('checkedType in StoneDisplay: ', checkedType);\n  console.log('checkedColor in StoneDisplay: ', checkedColor); ///// This is code I tried to filter stones conditionally without instance of state. /////\n\n  const stonesToShow = checkedType === {} && checkedColor === {} ? stones : stones.filter(item => item.type === checkedType && item.color === checkedColor); //stones.filter((item) => true) // Use this filter to 'override' filter\n  //console.log('item.type: ', item.type)\n\n  console.log('checkedType.length: ', checkedType.length);\n  console.log('checkedColor.length: ', checkedColor.length); ///// This code I'm trying to filter stones using state/useEffect. /////\n  // useEffect(() => {\n  //   setStonesToShow(currentStones => {\n  //     console.log('currentStones in useEffect: ', currentStones)\n  //     ///// This return statement just to display all/confirm data passing correctly /////\n  //     return currentStones.filter((item) => true);\n  //     /* **Need to fix the return below to show/filter items according to checkboxes selected**\n  //     **I believe I also need a conditional statement that displays all stones when nothing is checked** */\n  //     //return currentStones.filter(item => item.type === checkedType && item.color === checkedColor)\n  //   })\n  // }, [checkedType, checkedColor])\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stone\",\n    children: [/*#__PURE__*/_jsxDEV(StoneFilter, {\n      checkedType: checkedType,\n      setCheckedType: setCheckedType,\n      checkedColor: checkedColor,\n      setCheckedColor: setCheckedColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__carousel\",\n      children: stonesToShow.map(stone => /*#__PURE__*/_jsxDEV(Stone, {\n        stone: stone\n      }, stone.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StoneDisplay, \"008rs7vPY0qe4edAzGjsPFA9yuw=\");\n\n_c = StoneDisplay;\nexport default StoneDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoneDisplay\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneDisplay/StoneDisplay.js"],"names":["React","useState","StoneFilter","Stone","StoneDisplay","stones","checkedType","setCheckedType","checkedColor","setCheckedColor","console","log","stonesToShow","filter","item","type","color","length","map","stone","id"],"mappings":";;;;;AAAA,OAAOA,KAAP;AAAgB;AAAiBC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AACnC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD,CAFmC,CAGnC;;AACES,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCN,MAAxC,EAJiC,CAKjC;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CL,WAA7C;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CH,YAA9C,EAPiC,CASnC;;AAEA,QAAMI,YAAY,GAAIN,WAAW,KAAK,EAAhB,IAAsBE,YAAY,KAAK,EAAxC,GACrBH,MADqB,GAErBA,MAAM,CAACQ,MAAP,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcT,WAAd,IAA6BQ,IAAI,CAACE,KAAL,KAAeR,YAAlE,CAFA,CAXmC,CAcnC;AACA;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,WAAW,CAACW,MAAhD;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCH,YAAY,CAACS,MAAlD,EAjBmC,CAmBnC;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,OAAnB;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,WAAW,EAAEX,WADf;AAEE,MAAA,cAAc,EAAEC,cAFlB;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAIE,MAAA,eAAe,EAAEC;AAJnB;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGG,YAAY,CAACM,GAAb,CAAkBC,KAAD,iBAChB,QAAC,KAAD;AAEA,QAAA,KAAK,EAAEA;AAFP,SACKA,KAAK,CAACC,EADX;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CArDD;;GAAMhB,Y;;KAAAA,Y;AAuDN,eAAeA,YAAf","sourcesContent":["import React, { /* useEffect, */ useState } from 'react'\nimport StoneFilter from '../StoneFilter/StoneFilter'\nimport Stone from '../Stone/Stone'\n\nimport './StoneDisplay.css'\n\nconst StoneDisplay = ({ stones }) => {\n  const [checkedType, setCheckedType] = useState({})\n  const [checkedColor, setCheckedColor] = useState({})\n  //const [stonesToShow, setStonesToShow] = useState(stones)\n    console.log('stones in StoneDisplay: ', stones)\n    //console.log('stonesToShow in Display: ', stonesToShow)\n    console.log('checkedType in StoneDisplay: ', checkedType)\n    console.log('checkedColor in StoneDisplay: ', checkedColor)\n  \n  ///// This is code I tried to filter stones conditionally without instance of state. /////\n\n  const stonesToShow = (checkedType === {} && checkedColor === {}) ?\n  stones :\n  stones.filter(item => item.type === checkedType && item.color === checkedColor)\n  //stones.filter((item) => true) // Use this filter to 'override' filter\n  //console.log('item.type: ', item.type)\n  console.log('checkedType.length: ', checkedType.length)\n  console.log('checkedColor.length: ', checkedColor.length)\n\n  ///// This code I'm trying to filter stones using state/useEffect. /////\n\n  // useEffect(() => {\n  //   setStonesToShow(currentStones => {\n  //     console.log('currentStones in useEffect: ', currentStones)\n\n  //     ///// This return statement just to display all/confirm data passing correctly /////\n  //     return currentStones.filter((item) => true);\n\n  //     /* **Need to fix the return below to show/filter items according to checkboxes selected**\n  //     **I believe I also need a conditional statement that displays all stones when nothing is checked** */\n      \n  //     //return currentStones.filter(item => item.type === checkedType && item.color === checkedColor)\n  //   })\n  // }, [checkedType, checkedColor])\n  \n  return (\n    <section className=\"stone\">\n      <StoneFilter\n        checkedType={checkedType}\n        setCheckedType={setCheckedType}\n        checkedColor={checkedColor}\n        setCheckedColor={setCheckedColor}\n      />\n      <div className=\"stone__carousel\">\n        {stonesToShow.map((stone) =>\n          <Stone\n          key={stone.id}\n          stone={stone}\n          />\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default StoneDisplay"]},"metadata":{},"sourceType":"module"}