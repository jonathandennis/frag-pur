{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '../Header/Header';\nimport NavBar from '../NavBar/NavBar';\nimport About from '../About/About';\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem';\nimport Stone from '../Stone/Stone';\nimport Contact from '../Contact/Contact';\n/* import stoneService from '../../services/stones' */\n\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  _s();\n\n  const [stones, setStones] = useState([]);\n  const [filtersType, setFiltersType] = useState([]);\n  useEffect(() => {\n    console.log('effect');\n    axios.get('http://localhost:3001/stones').then(response => {\n      console.log('promise fulfilled');\n      setStones(response.data);\n    });\n  }, []);\n  console.log('render', stones.length, 'stones'); ////////// Filter logic //////////\n\n  useEffect(() => {\n    const filterValues = [...new Set(['all', ...stones.map(stone => stone.type)])];\n    setFiltersType(filterValues.map((stone, i) => ({\n      active: false,\n      value: stone,\n      id: i + 1\n    })));\n  }, [stones]);\n\n  const onFilterTypeChange = ({\n    target: {\n      checked: active,\n      dataset: {\n        value\n      }\n    }\n  }) => {\n    const newFilters = filtersType.map(stone => [stone.value, 'all'].includes(value) ? { ...stone,\n      active\n    } : stone),\n          isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active);\n    newFilters.find(stone => stone.value === 'all').active = isAll;\n    setFiltersType(newFilters);\n  };\n\n  const filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n        filteredStones = stones.filter(stone => filteredTypes.includes(stone.type)); ////////// END Filter logic //////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stone__nav-head\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stone__nav-list\",\n        children: [filtersType.map(n => /*#__PURE__*/_jsxDEV(StoneFilterListItem, { ...n,\n          onChange: onFilterTypeChange\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 19\n        }, this), filteredStones.map(n => /*#__PURE__*/_jsxDEV(Stone, {\n          stone: n,\n          ...n\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Contact, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FNJ4xkus+gWJfiNbO1JY0N3lUpE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/App/App.js"],"names":["React","useState","useEffect","Header","NavBar","About","StoneFilterListItem","Stone","Contact","axios","App","stones","setStones","filtersType","setFiltersType","console","log","get","then","response","data","length","filterValues","Set","map","stone","type","i","active","value","id","onFilterTypeChange","target","checked","dataset","newFilters","includes","isAll","filter","every","find","filteredTypes","filteredStones","n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAEY,WAAF,EAAeC,cAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAP,IAAAA,KAAK,CACJQ,GADD,CACK,8BADL,EAECC,IAFD,CAEMC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAJ,MAAAA,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAT;AACC,KALH;AAMD,GARQ,EAQN,EARM,CAAT;AASAL,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,MAAM,CAACU,MAA7B,EAAqC,QAArC,EAbgB,CAehB;;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAE,KAAF,EAAS,GAAGZ,MAAM,CAACa,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACC,IAA1B,CAAZ,CAAR,CAAJ,CAArB;AACAZ,IAAAA,cAAc,CAACQ,YAAY,CAACE,GAAb,CAAiB,CAACC,KAAD,EAAQE,CAAR,MAAe;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,KAAK,EAAEJ,KAAxB;AAA+BK,MAAAA,EAAE,EAAEH,CAAC,GAAG;AAAvC,KAAf,CAAjB,CAAD,CAAd;AACD,GAHQ,EAGN,CAAEhB,MAAF,CAHM,CAAT;;AAKA,QAAMoB,kBAAkB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAO,EAAEL,MAAX;AAAmBM,MAAAA,OAAO,EAAE;AAAEL,QAAAA;AAAF;AAA5B;AAAV,GAAD,KAAyD;AAClF,UACEM,UAAU,GAAGtB,WAAW,CAACW,GAAZ,CAAgBC,KAAK,IAAI,CAAEA,KAAK,CAACI,KAAR,EAAe,KAAf,EAAuBO,QAAvB,CAAgCP,KAAhC,IAAyC,EAAE,GAAGJ,KAAL;AAAYG,MAAAA;AAAZ,KAAzC,GAAgEH,KAAzF,CADf;AAAA,UAEEY,KAAK,GAAGF,UAAU,CAACG,MAAX,CAAkBb,KAAK,IAAIA,KAAK,CAACI,KAAN,KAAgB,KAA3C,EAAkDU,KAAlD,CAAwDd,KAAK,IAAIA,KAAK,CAACG,MAAvE,CAFV;AAIAO,IAAAA,UAAU,CAACK,IAAX,CAAgBf,KAAK,IAAIA,KAAK,CAACI,KAAN,KAAgB,KAAzC,EAAgDD,MAAhD,GAAyDS,KAAzD;AAEAvB,IAAAA,cAAc,CAACqB,UAAD,CAAd;AACD,GARD;;AAUA,QACEM,aAAa,GAAG5B,WAAW,CAACyB,MAAZ,CAAmBb,KAAK,IAAIA,KAAK,CAACG,MAAlC,EAA0CJ,GAA1C,CAA8CC,KAAK,IAAIA,KAAK,CAACI,KAA7D,CADlB;AAAA,QAEEa,cAAc,GAAG/B,MAAM,CAAC2B,MAAP,CAAcb,KAAK,IAAIgB,aAAa,CAACL,QAAd,CAAuBX,KAAK,CAACC,IAA7B,CAAvB,CAFnB,CAhCgB,CAoChB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEM;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,mBACGb,WAAW,CAACW,GAAZ,CAAgBmB,CAAC,iBAClB,QAAC,mBAAD,OAEMA,CAFN;AAGE,UAAA,QAAQ,EAAEZ;AAHZ,WACOY,CAAC,CAACb,EADT;AAAA;AAAA;AAAA;AAAA,gBADC,CADH,eAOM;AAAM,UAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAPN,EAQGY,cAAc,CAAClB,GAAf,CAAmBmB,CAAC,iBACrB,QAAC,KAAD;AACE,UAAA,KAAK,EAAEA,CADT;AAAA,aAGMA;AAHN,WAEOA,CAAC,CAACb,EAFT;AAAA;AAAA;AAAA;AAAA,gBADC,CARH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAuBE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAjED;;GAAMpB,G;;KAAAA,G;AAmEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Header from '../Header/Header'\nimport NavBar from '../NavBar/NavBar'\nimport About from '../About/About'\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem'\nimport Stone from '../Stone/Stone'\nimport Contact from '../Contact/Contact'\n/* import stoneService from '../../services/stones' */\nimport axios from 'axios'\n\nimport './App.css'\n\nconst App = () => {\n  const [stones, setStones] = useState([])\n  const [ filtersType, setFiltersType ] = useState([])\n\n  useEffect(() => {\n    console.log('effect');\n    axios\n    .get('http://localhost:3001/stones')\n    .then(response => {\n      console.log('promise fulfilled')\n      setStones(response.data)\n      })\n  }, [])\n  console.log('render', stones.length, 'stones')\n\n  ////////// Filter logic //////////\n\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.type) ])]\n    setFiltersType(filterValues.map((stone, i) => ({ active: false, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterTypeChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersType.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersType(newFilters)\n  };\n\n  const\n    filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n    filteredStones = stones.filter(stone => filteredTypes.includes(stone.type));\n\n  ////////// END Filter logic //////////\n\n  return (\n    <div className=\"appContainer\">\n      <Header />\n      <NavBar />\n      <About />\n      {/* <StoneDisplay stones={stones} /> */}\n      <div>\n      <h2 className=\"stone__nav-head\">Type</h2>\n            <div className=\"stone__nav-list\">\n              {filtersType.map(n =>\n              <StoneFilterListItem\n                key={n.id}\n                {...n}\n                onChange={onFilterTypeChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n              {filteredStones.map(n => \n              <Stone\n                stone={n}\n                key={n.id}\n                {...n}\n              />)}\n            </div>\n      </div>\n      <Contact />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}