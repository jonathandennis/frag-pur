{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem';\nimport Stone from '../Stone/Stone';\nimport checkboxesColor from './checkboxesColor';\nimport './StoneFilter.css';\n\nconst StoneFilter = ({\n  stones,\n  setCheckedColor,\n  checkedColor\n}) => {\n  _s();\n\n  //console.log('stones in StoneFilter: ', stones)\n  const [filtersType, setFiltersType] = useState([]); ////////// Filter Type logic //////////\n\n  useEffect(() => {\n    const filterValues = [...new Set(['all', ...stones.map(stone => stone.type)])];\n    setFiltersType(filterValues.map((stone, i) => ({\n      active: false,\n      value: stone,\n      id: i + 1\n    })));\n  }, [stones]);\n\n  const onFilterTypeChange = ({\n    target: {\n      checked: active,\n      dataset: {\n        value\n      }\n    }\n  }) => {\n    const newFilters = filtersType.map(stone => [stone.value, 'all'].includes(value) ? { ...stone,\n      active\n    } : stone),\n          isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active);\n    newFilters.find(stone => stone.value === 'all').active = isAll;\n    setFiltersType(newFilters);\n  };\n\n  const filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n        filteredStones = stones.filter(stone => filteredTypes.includes(stone.type)); ////////// END Filter Type logic //////////\n\n  const handleColorChange = event => {\n    setCheckedColor({ ...checkedColor,\n      [event.target.value]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stone\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stone__nav-head\",\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stone__nav-list\",\n        children: [filtersType.map(n => /*#__PURE__*/_jsxDEV(StoneFilterListItem, { ...n,\n          onChange: onFilterTypeChange\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }, this), filteredStones.map(n => /*#__PURE__*/_jsxDEV(Stone, {\n          stone: n,\n          ...n\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"stone__nav-head\",\n        children: \"Couleur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stone__nav-list\",\n        children: checkboxesColor.map(item => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"stone__nav-var\",\n          children: [item.value, /*#__PURE__*/_jsxDEV(StoneFilterListItem, {\n            id: item.id,\n            value: item.value,\n            checked: checkedColor[item.value],\n            onChange: handleColorChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"checkmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this)]\n        }, item.key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n\n_s(StoneFilter, \"QqEevk6+ik6BOP+38OvOQqVG+AY=\");\n\n_c = StoneFilter;\nexport default StoneFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoneFilter\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js"],"names":["React","useEffect","useState","StoneFilterListItem","Stone","checkboxesColor","StoneFilter","stones","setCheckedColor","checkedColor","filtersType","setFiltersType","filterValues","Set","map","stone","type","i","active","value","id","onFilterTypeChange","target","checked","dataset","newFilters","includes","isAll","filter","every","find","filteredTypes","filteredStones","handleColorChange","event","n","item","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem'\nimport Stone from '../Stone/Stone'\nimport checkboxesColor from './checkboxesColor'\n\nimport './StoneFilter.css'\n\nconst StoneFilter = ({ stones, setCheckedColor, checkedColor }) => {\n  //console.log('stones in StoneFilter: ', stones)\n  const [ filtersType, setFiltersType ] = useState([])\n\n  ////////// Filter Type logic //////////\n\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.type) ])]\n    setFiltersType(filterValues.map((stone, i) => ({ active: false, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterTypeChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersType.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersType(newFilters)\n  };\n\n  const\n    filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n    filteredStones = stones.filter(stone => filteredTypes.includes(stone.type));\n\n  ////////// END Filter Type logic //////////\n\n  const handleColorChange = event => {\n    setCheckedColor({\n      ...checkedColor,\n      [event.target.value]: event.target.checked\n    })\n  }\n\n\n    return (\n      <section className=\"stone\">\n        <div className=\"stone__nav\">\n            <h2 className=\"stone__nav-head\">Type</h2>\n            <div className=\"stone__nav-list\">\n              {filtersType.map(n =>\n              <StoneFilterListItem\n                key={n.id}\n                {...n}\n                onChange={onFilterTypeChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n              {filteredStones.map(n => \n              <Stone\n                stone={n}\n                key={n.id}\n                {...n}\n              />)}\n            </div>\n            <h2 className=\"stone__nav-head\">Couleur</h2>\n            <div className=\"stone__nav-list\">\n              {checkboxesColor.map(item => (\n                <label className=\"stone__nav-var\" key={item.key}>\n                  {item.value}\n                  <StoneFilterListItem\n                    id={item.id}\n                    value={item.value}\n                    checked={checkedColor[item.value]}\n                    onChange={handleColorChange}\n                  />\n                  <span className=\"checkmark\"></span>\n                </label>\n              ))}\n            </div>\n        </div>\n      </section>       \n    )\n}\n\nexport default StoneFilter"]},"metadata":{},"sourceType":"module"}