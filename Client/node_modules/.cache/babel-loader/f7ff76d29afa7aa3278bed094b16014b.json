{"ast":null,"code":"import _objectSpread from\"/Users/jonathandennis/frag-pur/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/jonathandennis/frag-pur/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/jonathandennis/frag-pur/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from'react';import StoneFilterListItem from'../StoneFilterListItem/StoneFilterListItem';import Stone from'../Stone/Stone';import'./StoneFilter.css';var StoneFilter=function StoneFilter(_ref){var stones=_ref.stones;//console.log('stones in StoneFilter: ', stones)\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),filtersType=_useState2[0],setFiltersType=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),filtersColor=_useState4[0],setFiltersColor=_useState4[1];////////// Filter Type logic //////////\nuseEffect(function(){var filterValues=_toConsumableArray(new Set(['all'].concat(_toConsumableArray(stones.map(function(stone){return stone.type;})))));setFiltersType(filterValues.map(function(stone,i){return{active:true,value:stone,id:i+1};}));},[stones]);var onFilterTypeChange=function onFilterTypeChange(_ref2){var _ref2$target=_ref2.target,active=_ref2$target.checked,value=_ref2$target.dataset.value;var newFilters=filtersType.map(function(stone){return[stone.value,'all'].includes(value)?_objectSpread(_objectSpread({},stone),{},{active:active}):stone;}),isAll=newFilters.filter(function(stone){return stone.value!=='all';}).every(function(stone){return stone.active;});newFilters.find(function(stone){return stone.value==='all';}).active=isAll;setFiltersType(newFilters);};////////// END Filter Type logic //////////\n////////// Filter Color logic //////////\nuseEffect(function(){var filterValues=_toConsumableArray(new Set(['all'].concat(_toConsumableArray(stones.map(function(stone){return stone.color;})))));setFiltersColor(filterValues.map(function(stone,i){return{active:false,value:stone,id:i+1};}));},[stones]);var onFilterColorChange=function onFilterColorChange(_ref3){var _ref3$target=_ref3.target,active=_ref3$target.checked,value=_ref3$target.dataset.value;var newFilters=filtersColor.map(function(stone){return[stone.value,'all'].includes(value)?_objectSpread(_objectSpread({},stone),{},{active:active}):stone;}),isAll=newFilters.filter(function(stone){return stone.value!=='all';}).every(function(stone){return stone.active;});newFilters.find(function(stone){return stone.value==='all';}).active=isAll;setFiltersColor(newFilters);};////////// END Filter Color logic //////////\nvar filteredTypes=filtersType.filter(function(stone){return stone.active;}).map(function(stone){return stone.value;}),filteredColors=filtersColor.filter(function(stone){return stone.active;}).map(function(stone){return stone.value;}),filteredStones=stones.filter(function(stone){return filteredTypes.includes(stone.type)||filteredColors.includes(stone.color);});return/*#__PURE__*/_jsxs(\"section\",{className:\"stone\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stone__nav\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"stone__nav-head\",children:\"Type\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stone__nav-list\",children:[filtersType.map(function(stone){return/*#__PURE__*/_jsx(StoneFilterListItem,_objectSpread(_objectSpread({},stone),{},{onChange:onFilterTypeChange}),stone.id);}),/*#__PURE__*/_jsx(\"span\",{className:\"checkmark\"})]}),/*#__PURE__*/_jsx(\"h2\",{className:\"stone__nav-head\",children:\"Couleur\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stone__nav-list\",children:[filtersColor.map(function(stone){return/*#__PURE__*/_jsx(StoneFilterListItem,_objectSpread(_objectSpread({},stone),{},{onChange:onFilterColorChange}),stone.id);}),/*#__PURE__*/_jsx(\"span\",{className:\"checkmark\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"stone__carousel\",children:filteredStones.map(function(stone){return/*#__PURE__*/_jsx(Stone,_objectSpread({stone:stone},stone),stone.id);})})]});};export default StoneFilter;","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js"],"names":["React","useEffect","useState","StoneFilterListItem","Stone","StoneFilter","stones","filtersType","setFiltersType","filtersColor","setFiltersColor","filterValues","Set","map","stone","type","i","active","value","id","onFilterTypeChange","target","checked","dataset","newFilters","includes","isAll","filter","every","find","color","onFilterColorChange","filteredTypes","filteredColors","filteredStones"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem'\nimport Stone from '../Stone/Stone'\n\nimport './StoneFilter.css'\n\nconst StoneFilter = ({ stones }) => {\n  //console.log('stones in StoneFilter: ', stones)\n  const [ filtersType, setFiltersType ] = useState([])\n  const [ filtersColor, setFiltersColor ] = useState([])\n\n  ////////// Filter Type logic //////////\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.type) ])]\n    setFiltersType(filterValues.map((stone, i) => ({ active: true, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterTypeChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersType.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersType(newFilters)\n  }\n  ////////// END Filter Type logic //////////\n  ////////// Filter Color logic //////////\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(stone => stone.color) ])]\n    setFiltersColor(filterValues.map((stone, i) => ({ active: false, value: stone, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterColorChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersColor.map(stone => [ stone.value, 'all' ].includes(value) ? { ...stone, active } : stone),\n      isAll = newFilters.filter(stone => stone.value !== 'all').every(stone => stone.active)\n\n    newFilters.find(stone => stone.value === 'all').active = isAll\n\n    setFiltersColor(newFilters)\n  } \n  ////////// END Filter Color logic //////////\n\n  const\n  filteredTypes = filtersType.filter(stone => stone.active).map(stone => stone.value),\n  filteredColors = filtersColor.filter(stone => stone.active).map(stone => stone.value),\n  filteredStones = stones.filter(stone => filteredTypes.includes(stone.type) || filteredColors.includes(stone.color))\n\n    return (\n      <section className=\"stone\">\n        <div className=\"stone__nav\">\n            <h2 className=\"stone__nav-head\">Type</h2>\n            <div className=\"stone__nav-list\">\n              {filtersType.map(stone =>\n              <StoneFilterListItem\n                key={stone.id}\n                {...stone}\n                onChange={onFilterTypeChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n            </div>\n            <h2 className=\"stone__nav-head\">Couleur</h2>\n            <div className=\"stone__nav-list\">\n              {filtersColor.map(stone =>\n              <StoneFilterListItem\n                key={stone.id}\n                {...stone}\n                onChange={onFilterColorChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n            </div>\n        </div>\n            <div className=\"stone__carousel\">\n              {filteredStones.map(stone => \n              <Stone\n                stone={stone}\n                key={stone.id}\n                {...stone}\n              />)}\n            </div>\n      </section>       \n    )\n}\n\nexport default StoneFilter"]},"metadata":{},"sourceType":"module"}