{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem';\nimport Stone from '../Stone/Stone';\nimport checkboxesType from './checkboxesType';\nimport checkboxesColor from './checkboxesColor';\nimport './StoneFilter.css';\n\nconst StoneFilter = (stones, setCheckedColor, checkedColor) => {\n  _s();\n\n  console.log('stones in StoneFilter: ', stones);\n  const [filtersType, setFiltersType] = useState([]);\n  useEffect(() => {\n    const filterValues = [...new Set(['all', ...stones.map(n => n.type)])];\n    setFiltersType(filterValues.map((n, i) => ({\n      active: false,\n      value: n,\n      id: i + 1\n    })));\n  }, [stones]);\n\n  const onFilterTypeChange = ({\n    target: {\n      checked: active,\n      dataset: {\n        value\n      }\n    }\n  }) => {\n    const newFilters = filtersType.map(n => [n.value, 'all'].includes(value) ? { ...n,\n      active\n    } : n),\n          isAll = newFilters.filter(n => n.value !== 'all').every(n => n.active);\n    newFilters.find(n => n.value === 'all').active = isAll;\n    setFiltersType(newFilters);\n  };\n\n  const filteredTypes = filtersType.filter(n => n.active).map(n => n.value),\n        filteredStones = stones.filter(n => filteredTypes.includes(n.type));\n\n  const handleColorChange = event => {\n    setCheckedColor({ ...checkedColor,\n      [event.target.value]: event.target.checked\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stone__nav\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"stone__nav-head\",\n      children: \"Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__nav-list\",\n      children: [filtersType.map(n => /*#__PURE__*/_jsxDEV(StoneFilterListItem, { ...n,\n        onChange: onFilterTypeChange\n      }, n.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"checkmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }, this), \")\", filteredStones.map(n => /*#__PURE__*/_jsxDEV(Stone, { ...n\n      }, n.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"stone__nav-head\",\n      children: \"Couleur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stone__nav-list\",\n      children: checkboxesColor.map(item => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"stone__nav-var\",\n        children: [item.value, /*#__PURE__*/_jsxDEV(StoneFilterListItem, {\n          id: item.id,\n          value: item.value,\n          checked: checkedColor[item.value],\n          onChange: handleColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 19\n        }, this)]\n      }, item.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StoneFilter, \"QqEevk6+ik6BOP+38OvOQqVG+AY=\");\n\n_c = StoneFilter;\nexport default StoneFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoneFilter\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneFilter/StoneFilter.js"],"names":["React","useEffect","useState","StoneFilterListItem","Stone","checkboxesType","checkboxesColor","StoneFilter","stones","setCheckedColor","checkedColor","console","log","filtersType","setFiltersType","filterValues","Set","map","n","type","i","active","value","id","onFilterTypeChange","target","checked","dataset","newFilters","includes","isAll","filter","every","find","filteredTypes","filteredStones","handleColorChange","event","item","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport StoneFilterListItem from '../StoneFilterListItem/StoneFilterListItem'\nimport Stone from '../Stone/Stone'\nimport checkboxesType from './checkboxesType'\nimport checkboxesColor from './checkboxesColor'\n\nimport './StoneFilter.css'\n\nconst StoneFilter = ( stones, setCheckedColor, checkedColor ) => {\n  console.log('stones in StoneFilter: ', stones)\n  const [ filtersType, setFiltersType ] = useState([])\n\n  useEffect(() => {\n    const filterValues = [...new Set([ 'all', ...stones.map(n => n.type) ])]\n    setFiltersType(filterValues.map((n, i) => ({ active: false, value: n, id: i + 1 })))\n  }, [ stones ])\n\n  const onFilterTypeChange = ({ target: { checked: active, dataset: { value } } }) => {\n    const\n      newFilters = filtersType.map(n => [ n.value, 'all' ].includes(value) ? { ...n, active } : n),\n      isAll = newFilters.filter(n => n.value !== 'all').every(n => n.active)\n\n    newFilters.find(n => n.value === 'all').active = isAll\n\n    setFiltersType(newFilters)\n  };\n\n  const\n    filteredTypes = filtersType.filter(n => n.active).map(n => n.value),\n    filteredStones = stones.filter(n => filteredTypes.includes(n.type));\n\n  const handleColorChange = event => {\n    setCheckedColor({\n      ...checkedColor,\n      [event.target.value]: event.target.checked\n    })\n  }\n\n\n    return (\n        <div className=\"stone__nav\">\n            <h2 className=\"stone__nav-head\">Type</h2>\n            <div className=\"stone__nav-list\">\n              {filtersType.map(n =>\n              <StoneFilterListItem\n                key={n.id}\n                {...n}\n                onChange={onFilterTypeChange}\n              />)}\n                  <span className=\"checkmark\"></span>\n              )\n              {filteredStones.map(n => \n              <Stone\n                key={n.id}\n                {...n}\n              />)}\n            </div>\n            <h2 className=\"stone__nav-head\">Couleur</h2>\n            <div className=\"stone__nav-list\">\n              {checkboxesColor.map(item => (\n                <label className=\"stone__nav-var\" key={item.key}>\n                  {item.value}\n                  <StoneFilterListItem\n                    id={item.id}\n                    value={item.value}\n                    checked={checkedColor[item.value]}\n                    onChange={handleColorChange}\n                  />\n                  <span className=\"checkmark\"></span>\n                </label>\n              ))}\n            </div>\n        </div>\n    )\n}\n\nexport default StoneFilter"]},"metadata":{},"sourceType":"module"}