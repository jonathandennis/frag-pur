{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jonathandennis/frag-pur/src/components/StoneDisplay/StoneDisplay.js\";\nimport React, {\n/* useEffect, */\nuseState } from 'react';\nimport StoneFilter from '../StoneFilter/StoneFilter';\nimport Stone from '../Stone/Stone';\nimport './StoneDisplay.css';\n\nconst StoneDisplay = stones => {\n  /*   const [checkedType, setCheckedType] = useState([])\n    const [checkedColor, setCheckedColor] = useState([])\n    //const [stonesToShow, setStonesToShow] = useState(stones)   // for useEffect\n      console.log('stones in StoneDisplay: ', stones)\n      //console.log('stonesToShow in Display: ', stonesToShow)  // for useEffect\n      console.log('checkedType in StoneDisplay: ', checkedType)\n      console.log('checkedColor in StoneDisplay: ', checkedColor)\n    \n    ///// This is code I am trying to filter stones conditionally without instance of state. /////\n  \n    const stonesToShow = (checkedType === {} && checkedColor === {}) // (checkedType.length === 0 && checkedColor.length === 0) tried this too, but had difficulty with length and current setup..\n    ? stones \n    : stones.filter(item => item.type === checkedType && item.color === checkedColor) // need to figure what is wrond with this filter\n  \n    //stones.filter((item) => true) // Use this filter to 'override' filter to show rendering functions work.\n  \n    console.log('checkedType.length: ', checkedType.length) // attempt to try and use .length for initial statement for conditional\n    console.log('checkedColor.length: ', checkedColor.length)// i.e. (checkedType.length === 0 && checkedColor.length === 0) ? ..\n  \n    ///// This code I'm trying to filter stones using state/useEffect that has been recommended. /////\n  \n    // useEffect(() => {\n    //   setStonesToShow(currentStones => {\n    //     console.log('currentStones in useEffect: ', currentStones)\n  \n    //     return currentStones.filter((item) => true); // Use this filter to 'override' filter to show rendering functions work.\n        \n    //     //return currentStones.filter(item => item.type === checkedType && item.color === checkedColor) // Need to fix this\n    //   })\n    // }, [checkedType, checkedColor])\n     */\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stone\",\n    children: /*#__PURE__*/_jsxDEV(StoneFilter, {\n      stones: stones\n      /* checkedType={checkedType}\n      setCheckedType={setCheckedType}\n      checkedColor={checkedColor}\n      setCheckedColor={setCheckedColor} */\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_c = StoneDisplay;\nexport default StoneDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoneDisplay\");","map":{"version":3,"sources":["/Users/jonathandennis/frag-pur/src/components/StoneDisplay/StoneDisplay.js"],"names":["React","useState","StoneFilter","Stone","StoneDisplay","stones"],"mappings":";;AAAA,OAAOA,KAAP;AAAgB;AAAiBC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAKC,MAAF,IAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,sBACE;AAAS,IAAA,SAAS,EAAC,OAAnB;AAAA,2BACE,QAAC,WAAD;AACA,MAAA,MAAM,EAAEA;AACN;AACR;AACA;AACA;;AALM;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAnDD;;KAAMD,Y;AAqDN,eAAeA,YAAf","sourcesContent":["import React, { /* useEffect, */ useState } from 'react'\nimport StoneFilter from '../StoneFilter/StoneFilter'\nimport Stone from '../Stone/Stone'\n\nimport './StoneDisplay.css'\n\nconst StoneDisplay = ( stones ) => {\n/*   const [checkedType, setCheckedType] = useState([])\n  const [checkedColor, setCheckedColor] = useState([])\n  //const [stonesToShow, setStonesToShow] = useState(stones)   // for useEffect\n    console.log('stones in StoneDisplay: ', stones)\n    //console.log('stonesToShow in Display: ', stonesToShow)  // for useEffect\n    console.log('checkedType in StoneDisplay: ', checkedType)\n    console.log('checkedColor in StoneDisplay: ', checkedColor)\n  \n  ///// This is code I am trying to filter stones conditionally without instance of state. /////\n\n  const stonesToShow = (checkedType === {} && checkedColor === {}) // (checkedType.length === 0 && checkedColor.length === 0) tried this too, but had difficulty with length and current setup..\n  ? stones \n  : stones.filter(item => item.type === checkedType && item.color === checkedColor) // need to figure what is wrond with this filter\n\n  //stones.filter((item) => true) // Use this filter to 'override' filter to show rendering functions work.\n\n  console.log('checkedType.length: ', checkedType.length) // attempt to try and use .length for initial statement for conditional\n  console.log('checkedColor.length: ', checkedColor.length)// i.e. (checkedType.length === 0 && checkedColor.length === 0) ? ..\n\n  ///// This code I'm trying to filter stones using state/useEffect that has been recommended. /////\n\n  // useEffect(() => {\n  //   setStonesToShow(currentStones => {\n  //     console.log('currentStones in useEffect: ', currentStones)\n\n  //     return currentStones.filter((item) => true); // Use this filter to 'override' filter to show rendering functions work.\n      \n  //     //return currentStones.filter(item => item.type === checkedType && item.color === checkedColor) // Need to fix this\n  //   })\n  // }, [checkedType, checkedColor])\n   */\n  return (\n    <section className=\"stone\">\n      <StoneFilter\n      stones={stones}\n        /* checkedType={checkedType}\n        setCheckedType={setCheckedType}\n        checkedColor={checkedColor}\n        setCheckedColor={setCheckedColor} */\n      />\n      {/* <div className=\"stone__carousel\">\n        {stonesToShow.map((stone) =>\n          <Stone\n          key={stone.id}\n          stone={stone}\n          />\n        )}\n      </div> */}\n    </section>\n  )\n}\n\nexport default StoneDisplay"]},"metadata":{},"sourceType":"module"}